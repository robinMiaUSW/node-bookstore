<style>
  .table th {
    cursor: pointer;
    position: relative;
  }

  .table th i {
    margin-left: 5px;
    font-size: inherit;
    /* Ensures the icon has the same size as the text */
    transition: transform 0.3s ease;
  }

  .table th.sorted-asc,
  .table th.sorted-desc {
    font-weight: bold;
    color: #007bff;
  }

  .table th.sorted-asc i {
    transform: rotate(0deg);
  }

  .table th.sorted-desc i {
    transform: rotate(180deg);
  }
</style>

<div class="row p-5">
  <!-- Page Title -->

  <!-- Orders Table -->
  <div class="card same-height mb-4">
    <div class="card-body">
      <div class="d-flex justify-content-between align-items-center mb-2">
        <h1 class="h5">List of Orders</h1>
        <form class="d-flex">
          <input id="searchInput" class="form-control" type="search" placeholder="Search Orders" aria-label="Search"
            onkeyup="searchTable()">
        </form>
      </div>
      <table class="table table-striped" id="ordersTable">
        <thead>
          <tr>
            <th onclick="sortTable(0, 'string')">Order ID <i class="bx bx-sort"></i></th>
            <th onclick="sortTable(1, 'datetime')">Date & Time <i class="bx bx-sort"></i></th>
            <th onclick="sortTable(2, 'string')">Customer Name <i class="bx bx-sort"></i></th>
            <th onclick="sortTable(3, 'number')">Total Amount <i class="bx bx-sort"></i></th>
            <th onclick="sortTable(4, 'string')">Status <i class="bx bx-sort"></i></th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="ordersBody">
          <% orders.forEach(order=> { %>
            <tr>
              <td>
                <%= order._id %>
              </td>
              <td>
                <%= new Date(order.createdAt).toLocaleString('en-US', { month: 'long' , day: 'numeric' , year: 'numeric'
                  , hour: 'numeric' , minute: 'numeric' , second: 'numeric' , hour12: true }) %>
              </td>
              <td>
                <%= order.customer_details.name %>
              </td>
              <td>$<%= order.amount_total.toFixed(2) %>
              </td>
              <td><span class="badge <%= order.status === 'Completed' ? 'bg-success' : 'bg-warning' %>">
                  <%= order.status %>
                </span></td>
              <td><a href="/orders/<%= order._id %>" class="btn btn-sm btn-primary">View Details</a></td>
            </tr>
            <% }); %>
        </tbody>
      </table>
    </div>
  </div>

  <!-- Pagination Controls -->
  <nav aria-label="Page navigation">
    <ul class="pagination justify-content-center" id="paginationControls"></ul>
  </nav>
</div>

<script>
  const rowsPerPage = 10;  // Number of rows to display per page
  let currentPage = 1;     // Current page number
  let allRows = [];        // To hold all rows initially
  let filteredRows = [];   // To hold filtered rows during search or sort

  // When the page loads, initialize the rows and display the first page
  window.onload = () => {
    initializeRows();
    displayTablePage(1);
  };

  // Initialize rows from the server-rendered table
  function initializeRows() {
    const table = document.getElementById("ordersTable");
    allRows = Array.from(table.getElementsByTagName("tbody")[0].getElementsByTagName("tr"));
    filteredRows = [...allRows];  // Initially, all rows are displayed
  }

  // Function to display the rows based on the current page
  function displayTablePage(page) {
    const totalRows = filteredRows.length;
    const totalPages = Math.ceil(totalRows / rowsPerPage);

    // Ensure the page is within the valid range
    currentPage = Math.max(1, Math.min(page, totalPages));

    // Hide all rows initially
    allRows.forEach(row => row.style.display = "none");

    // Show only the rows for the current page
    const startRow = (currentPage - 1) * rowsPerPage;
    const endRow = Math.min(startRow + rowsPerPage, totalRows);
    for (let i = startRow; i < endRow; i++) {
      filteredRows[i].style.display = "";
    }

    // Update pagination controls
    updatePaginationControls(totalPages);
  }

  // Function to update the pagination controls dynamically
  function updatePaginationControls(totalPages) {
    const paginationControls = document.getElementById("paginationControls");
    paginationControls.innerHTML = "";  // Clear existing pagination controls

    // Create "Previous" button
    const prevLi = document.createElement("li");
    prevLi.className = "page-item" + (currentPage === 1 ? " disabled" : "");
    const prevLink = document.createElement("a");
    prevLink.className = "page-link";
    prevLink.href = "#";
    prevLink.textContent = "Previous";
    prevLink.onclick = () => displayTablePage(currentPage - 1);
    prevLi.appendChild(prevLink);
    paginationControls.appendChild(prevLi);

    // Create individual page buttons
    for (let i = 1; i <= totalPages; i++) {
      const pageLi = document.createElement("li");
      pageLi.className = "page-item" + (i === currentPage ? " active" : "");
      const pageLink = document.createElement("a");
      pageLink.className = "page-link";
      pageLink.href = "#";
      pageLink.textContent = i;
      pageLink.onclick = () => displayTablePage(i);
      pageLi.appendChild(pageLink);
      paginationControls.appendChild(pageLi);
    }

    // Create "Next" button
    const nextLi = document.createElement("li");
    nextLi.className = "page-item" + (currentPage === totalPages ? " disabled" : "");
    const nextLink = document.createElement("a");
    nextLink.className = "page-link";
    nextLink.href = "#";
    nextLink.textContent = "Next";
    nextLink.onclick = () => displayTablePage(currentPage + 1);
    nextLi.appendChild(nextLink);
    paginationControls.appendChild(nextLi);
  }

  // Function to search the table dynamically
  function searchTable() {
    const input = document.getElementById('searchInput').value.toLowerCase();
    const table = document.getElementById("ordersTable");

    // Filter rows based on the search query
    filteredRows = allRows.filter(row => {
      const cells = row.getElementsByTagName("td");
      return Array.from(cells).some(cell => cell.textContent.toLowerCase().includes(input));
    });

    // Display the first page of the filtered results
    displayTablePage(1);
  }

  // Function to sort the table based on a column and data type
  function sortTable(columnIndex, type) {
    const table = document.getElementById("ordersTable");
    const isAscending = table.getAttribute('data-sort-asc') === 'true';
    const direction = isAscending ? 1 : -1;

    // Sort the filtered rows based on the column type (string, number, or datetime)
    filteredRows.sort((a, b) => {
      let aText = a.cells[columnIndex].textContent.trim();
      let bText = b.cells[columnIndex].textContent.trim();

      if (type === 'number') {
        return direction * (parseFloat(aText.replace(/[^0-9.-]+/g, "")) - parseFloat(bText.replace(/[^0-9.-]+/g, "")));
      } else if (type === 'datetime') {
        return direction * (new Date(aText) - new Date(bText));
      } else {
        return direction * aText.localeCompare(bText);
      }
    });

    // Update sort icons dynamically
    updateSortIcons(columnIndex, isAscending);

    // Toggle the sort direction
    table.setAttribute('data-sort-asc', !isAscending);

    // Display the first page after sorting
    displayTablePage(1);
  }

  // Function to update the sort icons in the table header
  function updateSortIcons(columnIndex, isAscending) {
    const headers = document.querySelectorAll("thead th i");

    // Reset all sort icons to default
    headers.forEach(icon => {
      icon.className = "bx bx-sort";
    });

    // Set the appropriate icon for the sorted column
    const sortedIcon = headers[columnIndex];
    if (isAscending) {
      sortedIcon.className = "bx bx-sort-up";
    } else {
      sortedIcon.className = "bx bx-sort-down";
    }
  }

</script>